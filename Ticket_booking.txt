use assignment_ticket;

/*
Tasks 1: Database Design:
1. Create the database named "TicketBookingSystem"
2. Write SQL scripts to create the mentioned tables with appropriate data types, constraints, and relationships.
Venu
Event
Customers
Booking
3. Create an ERD (Entity Relationship Diagram) for the database.
4. Create appropriate Primary Key and Foreign Key constraints for referential integrity.


-- TASK 1 COMPLETED




Tasks 2: Select, Where, Between, AND, LIKE:

*/
-- 1. Write a SQL query to insert at least 10 sample records into each table.
-- DONE


-- 2. Write a SQL query to list all Events.
select * from event;

-- 3. Write a SQL query to select events with available tickets.
select name, available_seats from event;

-- 4. Write a SQL query to select events name partial match with 'cup'.
select name from event
where name LIKE '%cup%';

-- 5. Write a SQL query to select events with ticket price range is between 1000 to 2500.
select name,ticket_price 
from event
where ticket_price between 500 AND 4000;


-- 6. Write a SQL query to retrieve events with dates falling within a specific range.
select name,date
from event
where date between '2024-1-1' AND '2024-5-1';


-- 7. Write a SQL query to retrieve events with available tickets that also have "Concert" in their name.
select name,available_seats
from event 
where name LIKE '%Concert%';

-- 8. Write a SQL query to retrieve users in batches of 5, starting from the 6th user.

select * from customer
limit 5,5;

-- 9. Write a SQL query to retrieve bookings details contains booked no of ticket more than 4.
select * from booking
where num_tickets>4;

-- 10. Write a SQL query to retrieve customer information whose phone number end with '000'
select * from customer
where phone_number LIKE '%4545';


-- 11. Write a SQL query to retrieve the events in order whose seat capacity more than 15000.
select name,total_seats from event
where total_seats>20000
order by total_seats DESC;

-- 12. Write a SQL query to select events name not start with 'x', 'y', 'z'
select name
from event
where name not like 'x%' 'y%''%z' ;


-- -----------------------------------------------------------------------------------------------------------------

-- Tasks 3: Aggregate functions, Having, Order By, GroupBy and Joins:
-- 1. Write a SQL query to List Events and Their Average Ticket Prices.
select e.name, avg(b.total_cost) as average
from event e, booking b
where e.id=b.event_id
group by b.event_id;


-- 2. Write a SQL query to Calculate the Total Revenue Generated by Events.
select e.name, sum(b.total_cost) as total_revenue
from event e, booking b
where e.id=b.event_id
group by b.event_id;



-- 3. Write a SQL query to find the event with the highest ticket sales.
select e.name, sum(b.total_cost) as total_tickets_sold
from event e, booking b
where e.id=b.event_id
group by b.event_id
order by total_tickets_sold desc
limit 1; 


-- 4. Write a SQL query to Calculate the Total Number of Tickets Sold for Each Event.
select e.name, sum(b.num_tickets) as total_tickets
from event e, booking b
where e.id=b.event_id
group by b.event_id;


-- 5. Write a SQL query to Find Events with No Ticket Sales.
select *
from event
where id NOT IN (select e.id
from event e, booking b where e.id = b.event_id);

-- 6. Write a SQL query to Find the User Who Has Booked the Most Tickets.

select c.name, sum(b.num_tickets) as total_tickets
from event e, booking b, customer c
where e.id=b.event_id AND b.customer_id=c.id
group by c.id
order by total_tickets DESC
limit 1;



-- 7. Write a SQL query to List Events and the total number of tickets sold for each month.
select b.event_id, e.name, MONTH(b.booking_date) as month, SUM(num_tickets) 
from event e, booking b
where e.id = b.event_id
group by MONTH(b.booking_date);

-- 8. Write a SQL query to calculate the average Ticket Price for Events in Each Venue.
select v.name, avg(ticket_price) as average
from event e, venue v
where e.venue_id = v.id
group by v.name;


-- 9. Write a SQL query to calculate the total Number of Tickets Sold for Each Event Type.
select  e.event_type, SUM(b.num_tickets) AS total_tickets
from event e,booking b
where e.id = b.event_id
group by e.event_type;

-- 10. Write a SQL query to calculate the total Revenue Generated by Events in Each Year.
select YEAR(b.booking_date) as year, SUM(total_cost) as total_revenue
from event e, booking b
where e.id = b.event_id
group by YEAR(date);


-- 11. Write a SQL query to list users who have booked tickets for multiple events.
select c.*
from booking b, customer c
where c.id = b.customer_id
group by c.id
having count(c.id) >1;

-- 12. Write a SQL query to calculate the Total Revenue Generated by Events for Each User.
select c.name, sum(b.total_cost) as Sum
from event e, booking b, customer c
where e.id=b.event_id AND b.customer_id=c.id
group by b.customer_id;


-- 13. Write a SQL query to calculate the Average Ticket Price for Events in Each Category and Venue.
select e.event_type, avg(e.ticket_price) as Average_Price
from venue v, event e, booking b
where e.venue_id=v.id AND e.id=b.event_id
group by event_type;



-- 13. 
select e.event_type, v.name, AVG(e.ticket_price) from event e, venue v where e.venue_id=v.id group by e.event_type, v.name;

-- -----------------------------------------------------------------------------------------------------------------



-- Tasks 4: Subquery and its types

-- 1. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery.
select
v.name, AVG(e.ticket_price) as Average_Ticket_price 
from venue v 
	JOIN event e ON v.id=e.venue_id
group by v.name;

-- 2. Find Events with More Than 50% of Tickets Sold using subquery.
select *
from event
where (total_seats-available_seats) > (total_seats/2);


-- 3. Calculate the Total Number of Tickets Sold for Each Event.
select e.name, e.event_type,SUM(total_seats-available_seats) as Tickets_Sold
from event e
group by name;

-- 4. Find Users Who Have Not Booked Any Tickets Using a NOT EXISTS Subquery.
select * 
from customer
where customer_id NOT IN(select customer_id from booking );

-- 5. List Events with No Ticket Sales Using a NOT IN Subquery.
select * from event where id not in(select e.id from event e, booking b where e.id = b.event_id);

-- 6. Calculate the Total Number of Tickets Sold for Each Event Type Using a Subquery in the FROM Clause.
select 	nd.name , SUM(nd.total_seats - available_seats)	as total_tickets_sold from (select * from event) as nd group by name;


-- 7. Find Events with Ticket Prices Higher Than the Average Ticket Price Using a Subquery in the WHERE Clause.
select name from event where(select avg(ticket_price) as avg_price from event e) < ticket_price ;

-- 8. Calculate the Total Revenue Generated by Events for Each User Using a Correlated Subquery.
select c.name, sum(b.total_cost) as total
from customer c JOIN booking b ON c.id=b.customer_id
group by c.id; 


-- 9. List Users Who Have Booked Tickets for Events in a Given Venue Using a Subquery in the WHERE Clause.
select customer_name,email
from customer 
where customer_id IN(select customer_id
					 from booking
                     where event_id IN(select event_id
									   from event
                                       where venue_id IN(select venue_id
														  from venue
                                                          where venue_name='chennai')));

-- 10. Calculate the Total Number of Tickets Sold for Each Event Category Using a Subquery with
-- GROUP BY.

select distinct e.event_type , SUM(total_seats-available_seats) as Tickets_Sold
from event e 
group by e.event_type;


-- 11. Find Users Who Have Booked Tickets for Events in each Month Using a Subquery with DATE_FORMAT.


-- 12. Calculate the Average Ticket Price for Events in Each Venue Using a Subquery

select 
v.name, AVG(e.ticket_price) as Average_Ticket_price 
from venue v 
	JOIN event e ON v.id=e.venue_id
group by v.name;
