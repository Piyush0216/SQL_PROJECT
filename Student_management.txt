use student_management_system;

/*
Task 1. Database Design:
1. Create the database named "SISDB"
2. Define the schema for the Students, Courses, Enrollments, Teacher, and Payments tables based on the provided schema. Write SQL scripts to create the mentioned tables with appropriate data types, constraints, and relationships.
a. Students
b. Courses
c. Enrollments
d. Teacher
e. Payments
3. Create an ERD (Entity Relationship Diagram) for the database.
4. Create appropriate Primary Key and Foreign Key constraints for referential integrity.
5. Insert at least 10 sample records into each of the following tables.
i. Students
ii. Courses
iii. Enrollments
iv. Teacher
v. Payments

*/

-- ===============================================================================================================================================

-- Tasks 2: Select, Where, Between, AND, LIKE:

-- 1. Write an SQL query to insert a new student into the "Students" table with the following details:
-- a. First Name: John
-- b. Last Name: Doe
-- c. Date of Birth: 1995-08-15
-- d. Email: john.doe@example.com
-- e. Phone Number: 1234567890

insert into student(first_name,last_name,date_of_birth,email,phone_number)
values 
('John','Doe','1995-08-15','john.doe@example.com','1234567890');




-- 2. Write an SQL query to enroll a student in a course. Choose an existing student and course and insert a record into the "Enrollments" table with the enrollment date.

insert into enrollment(student_id,course_id,enrollment_date) 
values(11,2,'09-04-2023');




-- 3. Update the email address of a specific teacher in the "Teacher" table. Choose any teacher and modify their email address.

update teacher 
set email = 'p.singh@example.com' 
where first_name = 'preeti';





-- 4. Write an SQL query to delete a specific enrollment record from the "Enrollments" table. Select an enrollment record based on the student and course.

delete from enrollment 
where student_id = 2 and course_id= 1;



select * from course;
-- 5. Update the "Courses" table to assign a specific teacher to a course. Choose any course and teacher from the respective tables.

update course
set teacher_id = 3
where course_name = 'Biology';




-- 6. Delete a specific student from the "Students" table and remove all their enrollment records from the "Enrollments" table. Be sure to maintain referential integrity.

delete from enrollment 
where student_id = 2;

delete from student
where student_id = 2;




-- 7. Update the payment amount for a specific payment record in the "Payments" table. Choose any payment record and modify the payment amount.

update payment 
set amount = 1500 
where payment_id = 1;


-- ==========================================================================================================================================================

-- Task 3. Aggregate functions, Having, Order By, GroupBy and Joins:

-- 1. Write an SQL query to calculate the total payments made by a specific student. You will need to join the "Payments"
-- table with the "Students" table based on the student's ID.

select s.* , sum(amount) as Total_Payment
from student s 
	JOIN payment p ON p.student_id = s.student_id
    group by s.student_id;

/*
	student_id	first_name	last_name	date_of_birth	email	phone_number	Total_Payment
	1	John	Smith	1998-05-15	john.smith@example.com	+91234567890	500
	2	Emily	Johnson	2000-02-28	emily.johnson@example.com	+91987654321	700
	3	Michael	Williams	1999-09-10	michael.williams@example.com	+91122334455	1000
	4	Emma	Brown	1997-11-20	emma.brown@example.com	+91555666777	800
	5	James	Jones	2001-04-03	james.jones@example.com	+91444333222	1200
	6	Olivia	Davis	1996-08-07	olivia.davis@example.com	+91777888999	900
	7	Liam	Miller	1998-12-12	liam.miller@example.com	+91888999000	1500
	8	Sophia	Wilson	2000-06-25	sophia.wilson@example.com	+91666777888	1100
	9	Ava	Taylor	1999-03-18	ava.taylor@example.com	+91999888777	1300
	10	William	Anderson	1997-10-30	william.anderson@example.com	+91133444555	1800
*/




-- 2. Write an SQL query to retrieve a list of courses along with the count of students enrolled in each course. 
-- Use a JOIN operation between the "Courses" table and the "Enrollments" table.

select c.course_name , count(e.enrollment_id) as total_enrolled 
from course c
	JOIN enrollment e ON e.course_id = c.course_id
    group by c.course_id;
    
/*
Mathematics	1
Physics	1
Chemistry	1
Biology	1
Computer Science	1
History	1
Literature	1
Economics	1
Psychology	1
Sociology	1
*/
    



-- 3. Write an SQL query to find the names of students who have not enrolled in any course. Use a LEFT JOIN between the "Students" 
-- table and the "Enrollments" table to identify students without enrollments.
select * 
from student s
	LEFT JOIN enrollment e ON e.student_id = s.student_id
    where e.enrollment_id is null;


/*
	student_id	first_name	last_name	date_of_birth	email	phone_number	enrollment_id	student_id	course_id	enrollment_date
	11	John	Doe	1995-08-15	john.doe@example.com	1234567890				
*/




-- 4. Write an SQL query to retrieve the first name, last name of students, and the names of the courses they are enrolled in. 
-- Use JOIN operations between the "Students" table and the "Enrollments" and "Courses" tables.alter

select s.first_name,s.last_name,c.course_name 
from student s
	JOIN enrollment e ON s.student_id = e.student_id
    JOIN course c ON c.course_id = e.student_id;

/*
John	Smith	Mathematics
Emily	Johnson	Physics
Michael	Williams	Chemistry
Emma	Brown	Biology
James	Jones	Computer Science
Olivia	Davis	History
Liam	Miller	Literature
Sophia	Wilson	Economics
Ava	Taylor	Psychology
William	Anderson	Sociology
*/




-- 5. Create a query to list the names of teachers and the courses they are assigned to. Join the "Teacher" table with the "Courses" table.

select t.first_name ,t.last_name, c.course_name
from teacher t
	JOIN course c ON c.teacher_id = t.teacher_id;

/*
Christopher	Clark	Mathematics
Jessica	Walker	Physics
Matthew	Hill	Chemistry
Sarah	Green	Biology
Daniel	Allen	Computer Science
Ashley	Carter	History
David	Wright	Literature
Jennifer	Moore	Economics
Joseph	Mitchell	Psychology
Megan	Young	Sociology
*/




-- 6. Retrieve a list of students and their enrollment dates for a specific course. 
-- You'll need to join the "Students" table with the "Enrollments" and "Courses" tables.

select s.first_name , s.last_name , e.enrollment_date
from student s
	JOIN enrollment e ON e.student_id = s.student_id
    JOIN course c ON c.course_id = e.course_id
    where c.course_name = 'Chemistry';

/*
Emily	Johnson	2024-04-11
*/





-- 7. Find the names of students who have not made any payments.
--  Use a LEFT JOIN between the "Students" table and the "Payments" table and filter for students with NULL payment records.

SELECT s.*
FROM student s
LEFT JOIN payment p ON p.student_id = s.student_id
WHERE p.payment_id IS NULL;

    
-- 8. Write a query to identify courses that have no enrollments. You'll need to use a LEFT JOIN between the "Courses"
--  table and the "Enrollments" table and filter for courses with NULL enrollment records.

select c.*
from course c
	LEFT JOIN enrollment e ON e.course_id = c.course_id
    where e.enrollment_id is null;





-- 9. Identify students who are enrolled in more than one course. Use a self-join on the "Enrollments" table to find students with multiple enrollment records.

select *
from student s
	JOIN enrollment e ON e.student_id = s.student_id
    JOIN course c ON c.course_id = e.course_id
    group by s.student_id
    having count(e.enrollment_id)>1;
    
    
-- 10. Find teachers who are not assigned to any courses. Use a LEFT JOIN between the "Teacher" table and the "Courses" table and
--  filter for teachers with NULL course assignments.

select t.*
from teacher t
	LEFT JOIN course c ON t.teacher_id = c.teacher_id
    where c.course_id is Null;
    

-- =============================================================================================================================================
-- Task 4. Subquery and its type:

-- 1. Write an SQL query to calculate the average number of students enrolled in each
-- course. Use aggregate functions and subqueries to achieve this.

-- We want this course_name  avg(student_enrolled)
select c.course_name , count(s.student_id)
from student s
	JOIN enrollment e ON e.student_id = s.student_id
    JOIN course c ON c.course_id = e.course_id
    group by c.course_id;
    
/*
Mathematics	1
Physics	1
Chemistry	1
Biology	1
Computer Science	1
History	1
Literature	1
Economics	1
Psychology	1
Sociology	1
    
    */

-- 2. Identify the student(s) who made the highest payment. Use a subquery to find the maximum payment 
-- amount and then retrieve the student(s) associated with that amount.
SELECT s.*
FROM student s
JOIN payment p ON s.student_id = p.student_id
WHERE p.amount = (
    SELECT MAX(amount)
    FROM payment
);

/*

10	William	Anderson	1997-10-30	william.anderson@example.com	+91133444555
*/

-- 3. Retrieve a list of courses with the highest number of enrollments. Use subqueries to find the course(s) with the maximum enrollment count.
SELECT course_name
FROM course
WHERE course_id IN (
    SELECT course_id
    FROM enrollment
    GROUP BY course_id
    HAVING COUNT(*) = (
        SELECT MAX(enrollment_count)
        FROM (
            SELECT COUNT(*) AS enrollment_count
            FROM enrollment
            GROUP BY course_id
        ) AS max_enrollments
    )
);     

/*
Mathematics
Physics
Chemistry
Biology
Computer Science
History
Literature
Economics
Psychology
Sociology
  */

-- 4. Calculate the total payments made to courses taught by each teacher. Use subqueries to sum payments for each teacher's courses.

SELECT t.first_name, t.last_name, SUM(p.amount) AS total_payments
FROM teacher t
JOIN course c ON t.teacher_id = c.teacher_id
JOIN enrollment e ON c.course_id = e.course_id
JOIN payment p ON e.student_id = p.student_id
GROUP BY t.teacher_id, t.first_name, t.last_name;

/*
Christopher	Clark	500
Christopher	Clark	500
Jessica	Walker	900
Matthew	Hill	700
Sarah	Green	1500
Daniel	Allen	1000
Ashley	Carter	1100
David	Wright	800
Jennifer	Moore	1300
Joseph	Mitchell	1200
Megan	Young	1800
*/

-- 5. Identify students who are enrolled in all available courses. Use subqueries to compare a student's enrollments with the total number of courses.

SELECT student_id, first_name, last_name
FROM student
WHERE (
    SELECT COUNT(DISTINCT course_id)
    FROM course
) = (
    SELECT COUNT(DISTINCT course_id)
    FROM enrollment
    WHERE student.student_id = enrollment.student_id
);

-- 6. Retrieve the names of teachers who have not been assigned to any courses. Use subqueries to find teachers with no course assignments.

SELECT first_name, last_name
FROM teacher
WHERE teacher_id NOT IN (
    SELECT DISTINCT teacher_id
    FROM course
);

      
-- 7. Calculate the average age of all students. Use subqueries to calculate the age of each student based on their date of birth.

SELECT AVG(student_age) AS average_age
FROM (
    SELECT TIMESTAMPDIFF(YEAR, date_of_birth, CURDATE()) AS student_age
    FROM student
) AS age_data;

/*
24.8000
*/
-- 8. Identify courses with no enrollments. Use subqueries to find courses without enrollment records.

SELECT course_id, course_name
FROM course
WHERE course_id NOT IN (
    SELECT DISTINCT course_id
    FROM enrollment
);

-- 9. Calculate the total payments made by each student for each course they are enrolled in. Use subqueries and aggregate functions to sum payments.

SELECT s.student_id, s.first_name, s.last_name, c.course_id, c.course_name, SUM(p.amount) AS total_payment
FROM student s
JOIN enrollment e ON s.student_id = e.student_id
JOIN course c ON e.course_id = c.course_id
JOIN payment p ON s.student_id = p.student_id
GROUP BY s.student_id, c.course_id;

/*
1	John	Smith	1	Mathematics	500
2	Emily	Johnson	3	Chemistry	700
3	Michael	Williams	5	Computer Science	1000
4	Emma	Brown	7	Literature	800
5	James	Jones	9	Psychology	1200
6	Olivia	Davis	2	Physics	900
7	Liam	Miller	4	Biology	1500
8	Sophia	Wilson	6	History	1100
9	Ava	Taylor	8	Economics	1300
10	William	Anderson	10	Sociology	1800
*/
-- 10. Identify students who have made more than one payment. Use subqueries and aggregate functions to count payments per student and filter for those with counts greater than one.
SELECT s.student_id, s.first_name, s.last_name
FROM student s
JOIN (
    SELECT student_id
    FROM payment
    GROUP BY student_id
    HAVING COUNT(*) > 1
) AS multiple_payments ON s.student_id = multiple_payments.student_id;


-- 11. Write an SQL query to calculate the total payments made by each student. Join the "Students" table with the "Payments" table and use GROUP BY to calculate the sum of payments for each student.
SELECT s.student_id, s.first_name, s.last_name, SUM(p.amount) AS total_payments
FROM student s
LEFT JOIN payment p ON s.student_id = p.student_id
GROUP BY s.student_id, s.first_name, s.last_name;

/*
1	John	Smith	500
2	Emily	Johnson	700
3	Michael	Williams	1000
4	Emma	Brown	800
5	James	Jones	1200
6	Olivia	Davis	900
7	Liam	Miller	1500
8	Sophia	Wilson	1100
9	Ava	Taylor	1300
10	William	Anderson	1800
*/

-- 12. Retrieve a list of course names along with the count of students enrolled in each course. Use JOIN operations between the "Courses" table and the "Enrollments" table and GROUP BY to count enrollments.

SELECT c.course_name, COUNT(e.student_id) AS enrolled_students_count
FROM course c
LEFT JOIN enrollment e ON c.course_id = e.course_id
GROUP BY c.course_id, c.course_name;

/*
Mathematics	1
Physics	1
Chemistry	1
Biology	1
Computer Science	1
History	1
Literature	1
Economics	1
Psychology	1
Sociology	1
*/

-- 13. Calculate the average payment amount made by students. Use JOIN operations between the "Students" table and the "Payments" table and GROUP BY to calculate the average.
SELECT AVG(p.amount) AS average_payment_amount
FROM payment p
JOIN student s ON p.student_id = s.student_id;

/*
  1080.0000   
*/
